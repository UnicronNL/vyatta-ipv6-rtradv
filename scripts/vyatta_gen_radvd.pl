#!/usr/bin/perl
#
# Module: vyatta_gen_radvd.pl
#
# **** License ****
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# This code was originally developed by Vyatta, Inc.
# Portions created by Vyatta are Copyright (C) 2005-2009 Vyatta, Inc.
# All Rights Reserved.
#
# Author: Bob Gilligan <gilligan@vyatta.com>
# Date: 2009
# Description:  Setup section of the radvd.conf file for an interface.
#
# **** End License ****
#
#

#
# Syntax:
#    vyatta_gen_radvd.pl --generate <ifname> <config-param-root>
#    vyatta_gen_radvd.pl --delete <ifname>
#
# In the first instance, <ifname> is the name of the interface for
# which the configuration file is to be generated (e.g. eth0, eth7.3,
# pppoe7, wan0.1, ml0, etc.) and <config-param-root> is the root of
# the tree of configuration parameters
# (e.g. "/interfaces/ethernet/eth0/ipv6/router-advert").
#
# This script generates a partial radvd.conf file holding the
# parameters for one interface, and writes it to a temp file.  It then
# strips any previous configuration for this interface from the
# system-wide config file /etc/radvd.conf.  Then it cat's the contents
# of the temp file into the system-wide config file /etc/radvd.conf.
# After that it re-starts the radvd daemon.  Since the daemon is stateless,
# re-starting it is a lightweight operation.
#
# In the second instance, <ifname> is the name of the interface
# whose configuration is to be removed from the /etc/radvd.conf file

use strict;
use lib "/opt/vyatta/share/perl5/";
use FileHandle;
use Vyatta::Config;
use Getopt::Long;

my $temp_file="/tmp/radvd_config_if_";
my $conf_file="/etc/radvd.conf";

# Set to 1 to enable debug output
my $debug_flag=0;

sub log_msg {
    my $message = shift;

    if ($debug_flag > 0) {
        print "DEBUG: $message"
    }
}

my $config;
my $FD_WR;
my @generate;
my $delete;

GetOptions("generate=s{2}"       => \@generate,
           "delete=s"             => \$delete
);

if (scalar(@generate) == 2) {
    generate_conf(@generate);
    exit 0;
}


if ($delete) {
    delete_conf($delete);
    exit 0;
}

printf("Error: invalid args: $ARGV\n");
exit 1;

# Parse and write config file for one prefix under an interface
sub do_prefix {
    my $param_root = $_[0];
    my $prefix = $_[1];

    print $FD_WR "    prefix $prefix {\n";

    my @prefix_params = $config->listNodes("$param_root prefix $prefix");
    log_msg("prefix_params for prefix $prefix: @prefix_params\n");
    while (@prefix_params) {
        my $prefix_param = shift @prefix_params;
        log_msg("prefix_param = $prefix_param\n");

        my $value = 
            $config->returnValue("$param_root prefix $prefix $prefix_param");

        if ($prefix_param eq "on-link-flag") {
            if ($value eq "true") {
                print $FD_WR "        AdvOnLink on;\n";
            } else {
                print $FD_WR "        AdvOnLink off;\n";
            }
        } elsif ($prefix_param eq "autonomous-flag") {
            if ($value eq "true") {
                print $FD_WR "        AdvAutonomous on;\n";
            } else {
                print $FD_WR "        AdvAutonomous off;\n";
            }
        } elsif ($prefix_param eq "valid-lifetime") {
            print $FD_WR "        AdvValidLifetime $value;\n";
        } elsif ($prefix_param eq "preferred-lifetime") {
            print $FD_WR "        AdvPreferredLifetime $value;\n";
        }
        
    }
        
    print $FD_WR "    };\n";
}

# Parse params and write config file for one interface
sub do_interface {
    my $param_root = $_[0];
    my $ifname = $_[1];
    my $date = `date`;
    my $user = `id -un`;

    $date =~ s/\n//;
    $user =~ s/\n//;

    print $FD_WR "interface $ifname {\n";
    print $FD_WR "#   This section is automatically generated by the Vyatta\n";
    print $FD_WR "#   configuration sub-system.  Do not edit it.\n";
    print $FD_WR "#\n";
    print $FD_WR "#   Generated on $date by $user\n";
    print $FD_WR "#\n";

    print $FD_WR "    IgnoreIfMissing on;\n";
    print $FD_WR "    AdvSendAdvert on;\n";

    my @params = $config->listNodes($param_root);

    log_msg("params = @params\n");

    while (@params) {
        my $param = shift @params;
        log_msg("Node: $param \n");

        my $value = $config->returnValue("$param_root $param");
        log_msg("Value: $value\n");

        if ($param eq "max-interval") {
            print $FD_WR "    MaxRtrAdvInterval $value;\n";
        } elsif ($param eq "min-interval") {
            print $FD_WR "    MinRtrAdvInterval $value;\n";
        } elsif ($param eq "managed-flag") {
            if ($value eq "true") {
                print $FD_WR "    AdvManagedFlag on;\n";
            } else {
                print $FD_WR "    AdvManagedFlag off;\n";
            }
        } elsif ($param eq "other-config-flag") {
            if ($value eq "true") {
                print $FD_WR "    AdvOtherConfigFlag on;\n";
            } else {
                print $FD_WR "    AdvOtherConfigFlag off;\n";
            }
        } elsif ($param eq "link-mtu") {
            print $FD_WR "    AdvLinkMTU $value;\n";
        } elsif ($param eq "reachable-time") {
            print $FD_WR "    AdvReachableTime $value;\n";
        } elsif ($param eq "retrans-timer") {
            print $FD_WR "    AdvRetransTimer $value;\n";
        } elsif ($param eq "cur-hop-limit") {
            print $FD_WR "    AdvCurHopLimit $value;\n";
        } elsif ($param eq "default-lifetime") {
            print $FD_WR "    AdvDefaultLifetime $value;\n";
        } elsif ($param eq "prefix") {
            # Skip for now.  We'll do these later.
        }
    }

    # Process prefix params, if any
    my @prefix_params = $config->listNodes("$param_root prefix");
    log_msg("prefix_params = @prefix_params\n");
    while (@prefix_params) {
        my $prefix = shift @prefix_params;
        
        log_msg("prefix = $prefix\n");
        do_prefix($param_root, $prefix);
    }

    print $FD_WR "};\n";
}

sub generate_conf {
    my $ifname = $_[0];
    my $param_root = $_[1];
    my $exit_code;

    log_msg("ifname = $ifname, param_root = $param_root.\n");

    # Generate temp config file for this interface

    $FD_WR = new FileHandle();

    $temp_file = $temp_file . $$;
    if (!open($FD_WR, ">$temp_file")) {
        printf("can't open temp file: $temp_file\n");
        exit 1;
    }

    $config = new Vyatta::Config;

    # Generate config file section for interface into temp file
    do_interface($param_root, $ifname);

    # Ensure that the config file exists
    system "touch $conf_file";

    # Delete old parameter section for interface from global config file
    delete_conf($ifname);

    # Cat newly generated temp file into global config file
    log_msg("copying in tempfile...\n");

    $exit_code = system "cat $temp_file >> $conf_file";

    log_msg("exit_code is $exit_code\n");

    if ($exit_code != 0) {
        printf("Unable add new configuration radvd system config file.\n");
        exit 1;
    }

    system "rm -f $temp_file";
}


#
# Delete the configuration information for an interface from the config file.
#
sub delete_conf {
    my $ifname = $_[0];
    log_msg("delete_conf ifname = $ifname\n");

    my $exit_code;
    my $sedcmd = "sed -i -e \'/^interface $ifname {/,/^}/d\' $conf_file";
    log_msg("sedcmd is $sedcmd \n");

    my $exit_code = system $sedcmd;
    log_msg("exit_code is $exit_code\n");
    if ($exit_code != 0) {
        printf("Unable to edit radvd system config file.  Exit code $exit_code\n");
        exit 1;
    }
}

# Local Variables:
# mode: perl
# indent-tabs-mode: nil
# perl-indent-level: 4
# End:

